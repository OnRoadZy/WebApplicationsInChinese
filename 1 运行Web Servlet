运行Web Servlet

1运行Web Servlet
有许多方法可以运行Web servlet。
1.1即时运行Servlet
#lang web-server / insta											（包：web-server-doc）
在Web服务器中运行servlet的最快方法是在DrRacket中使用“Insta”语言。 在DrRacket中输入以下内容：

#lang web-server/insta
 
(define (start req)
  (response/xexpr
   `(html (head (title "Hello world!"))
          (body (p "Hey out there!")))))

然后按运行。 Web浏览器将打开显示您的新的servlet。 此servlet只能从本地计算机访问。
在幕后，DrRacket使用serve / servlet启动一个新服务器，它使用您的启动函数作为servlet。您将获得整个web-server/servlet API。
提供以下API以自定义服务器实例：

(no-web-browser) → void

调用此命令将指示DrRacket在按Run时不启动Web浏览器。

(static-files-path path) → void
path : path-string?

这将指示Web服务器从路径中提供静态文件，例如样式表和图像。
如果想要更多地控制特定的参数，请继续阅读web-server/servlet-env对应内容。
1.2简单的单个Servlet服务器
 (require web-server/servlet-env) 									 （包: web-server-lib）

Web服务器提供了一种方法来快速配置和启动比web-server/insta提供得更多可定制的servlet。 这由web-server/servlet-env模块提供。
1.2.1示例
这里有一个简单的例子：

#lang racket
(require web-server/servlet
         web-server/servlet-env)
 
(define (start req)
  (response/xexpr
   `(html (head (title "Hello world!"))
          (body (p "Hey out there!")))))
 
(serve/servlet start)

与web-server/insta语言不同，start不是一个特殊的标识符，所以我们可以把这个例子像下面这样写：

#lang racket
(require web-server/servlet
         web-server/servlet-env)
 
(define (my-app req)
  (response/xexpr
   `(html (head (title "Hello world!"))
          (body (p "Hey out there!")))))
 
(serve/servlet my-app)

让我们来看看servlet / servlet允许的一些定制。
假设您想将端口更改为其他值，将最后一行更改为：

(serve/servlet my-app
               #:port 8080)

假设您要接受来自外部计算机的连接：

(serve/servlet my-app
               #:listen-ip #f)

默认情况下，你的servlet的URL是“http://localhost:8000/servlets/standalone.rkt”，假设你希望它是“http://localhost:8000/hello.rkt”：

(serve/servlet my-app
               #:servlet-path "/hello.rkt")

假设您想要捕获顶级请求：

(serve/servlet my-app
               #:servlet-regexp #rx"")

或者，也许只是一些不错的顶级名称：

(serve/servlet my-app
               #:servlet-path "/main")

假设您想使用在桌面（“/Users/jay/Desktop /”）上找到的样式表（“style.css”）：

(serve/servlet my-app
               #:extra-files-paths
               (list
                (build-path "/Users/jay/Desktop")))

除了＃:server-root-path“htdocs”目录中的这些文件之外，还会提供这些文件。您可以传递任何数量的额外路径。
如果要在Web应用程序的启动脚本中使用serve/servlet，并且不希望打开浏览器或打印DrRacket横幅，则可以写为：

(serve/servlet my-app
               #:command-line? #t)

1.2.1.1无状态Servlet
假设您想为无状态Web servlet“servlet.rkt”启动一个服务器，该服务器提供start为：

#lang racket
(require "servlet.rkt"
         web-server/servlet-env)
 
(serve/servlet start #:stateless? #t)

您还可以直接在Web服务器模块中调用serve/servlet：

#lang web-server
(require web-server/servlet-env)
 
(define (start req)
  (start
   (send/suspend
    (lambda (k-url)
      (response/xexpr
       `(html (body (a ([href ,k-url]) "Hello world!"))))))))
 
(serve/servlet start #:stateless? #t)

像往常一样，你甚至不需要保存文件。
1.2.2完整的API
(serve/servlet
		start	 
     	 [#:command-line? command-line?	 
     	 	#:connection-close? connection-close?	 
     	 	#:launch-browser? launch-browser?	 
     	 	#:quit? quit?	 
     	 	#:banner? banner?	 
     	 	#:listen-ip listen-ip	 
     	 	#:port port	 
     	 	#:max-waiting max-waiting	 
     	 	#:servlet-path servlet-path	 
     	 	#:servlet-regexp servlet-regexp	 
     	 	#:stateless? stateless?	 
     	 	#:stuffer stuffer	 
     	 	#:manager manager	 
     	 	#:servlet-namespace servlet-namespace	 
     	 	#:server-root-path server-root-path	 
     	 	#:extra-files-paths extra-files-paths	 
     	 	#:servlets-root servlets-root	 
     	 	#:servlet-current-directory servlet-current-directory	 
     	 	#:file-not-found-responder file-not-found-responder	 
     	 	#:servlet-loading-responder responders-servlet-loading	 
     	 	#:servlet-responder responders-servlet	 
     	 	#:mime-types-path mime-types-path	 
     	 	#:ssl? ssl?	 
     	 	#:ssl-cert ssl-cert	 
     	 	#:ssl-key ssl-key	 
     	 	#:log-file log-file	 
     	 	#:log-format log-format])	 

→ void
start : (request? . -> . can-be-response?)
command-line? : boolean? = #f
connection-close? : boolean? = #f
launch-browser? : boolean? = (not command-line?)
quit? : boolean? = (not command-line?)
banner? : boolean? = (not command-line?)
listen-ip : (or/c false/c string?) = "127.0.0.1"
port : listen-port-number? = 8000
max-waiting : exact-nonnegative-integer? = 511
servlet-path : string? = "/servlets/standalone.rkt"
	servlet-regexp:regexp? =	 	
(regexp
		(format
  "^~a$"
  (regexp-quote servlet-path)))
  stateless? : boolean? = #f
  stuffer : (stuffer/c serializable? bytes?) = default-stuffer
  	manager	 :manager?
 	 	 	= (make-threshold-LRU-manager #f (* 128 1024 1024))
  servlet-namespace : (listof module-path?) = empty
  	server-root-path:path-string?
 	 	 	= (collection-path "web-server" "default-web-root")
  	extra-files-paths:(listof path-string?)
 	 	 	=(list (build-path server-root-path "htdocs"))
  	servlets-root:path-string?
 	 	 	=(build-path server-root-path "htdocs")
  servlet-current-directory : path-string? = servlets-root
  	file-not-found-responder:	(request? . -> . can-be-response?)
 	 	 	=(gen-file-not-found-responder
					 (build-path server-root-path  "conf"
  "not-found.html"))
  	responders-servlet-loading:(url? any/c . -> . can-be-response?)
 	 	 	=servlet-loading-responder
  	responders-servlet:(url? any/c . -> . can-be-response?)
 	 	 	=servlet-error-responder
  mime-types-path : path-string? = ....
  ssl? : boolean? = #f
  	ssl-cert:	or/c false/c path-string?)
 	 	 	=(and ssl? (build-path server-root-path "server-cert.pem"))
  	ssl-key:	or/c false/c path-string?)
 	 	 	=(and ssl? (build-path server-root-path "private-key.pem"))
  log-file : (or/c false/c path-string?) = #f
  	log-format:(or/c log-format/c format-req/c)
 	 	 	=apache-default

这将设置和启动一个相当默认的服务器实例。
start作为servlet加载，并响应与servlet-regexp匹配的请求。前目录 servlet执行的当是servlet-current-directory。
如果launch-brower? 为true，则Web浏览器将打开为“http://localhost:<port> <servlet-path>”。 servlet-path没有其他目的，如果提供了servlet-regexp。
如果退出quit? 是true，那么URL“/quit”结束服务器。
如果stateless? 是true，那么servlet作为无状态运行。

#lang web-server

模块和填充器用作填充器。
serve/servlet是比serve/launch/wait，dispatch/servlet和一些标准调度程序更简单的接口。一些选项，象端口和最大等待时间被透明地传递给 serve/launch/wait。某些高级自定义需要直接使用Web服务器的这些基础部分。但是，许多更简单的自定义不会，本节的其余部分将对此进行描述。
服务器监听listen-ip和port端口。如果listen-ip是#f，那么服务器接受所有连接到的监听器地址。否则，服务器只接受与给定字符串相关联的接口的连接。例如，提供“127.0.0.1”（默认值）作为listen-ip创建一个服务器，它只接受来自本地机的“127.0.0.1”（回送接口）的连接。
如果ssl-cert和ssl-key不为false，那么服务器以HTTPS模式运行，并使用ssl-cert和ssl-key作为证书和私钥。
servlet加载了manager作为其扩展管理器。 （默认管理器将内存量限制为64 MB，并按照make-threshold-LRU-manager文档中所述处理内存压力。）
服务器文件根目录在server-root-path（默认情况下，它是web服务器集合中的“default-web-root”目录）。文件路径，除了“htdocs”目录下的server-root-path（服务器根路径）可以提供extra-files-paths（额外文件路径）。这些路径首先按照它们在列表中出现的顺序进行检查。
其他servlet通过servlet-root提供服务。由servlet-namespace指定的模块被servlet-root和当前命名空间（因此也是启动程序）共有的的servlet之间共享。
如果找不到文件，则使用file-not-found-responder生成错误响应。如果servlet加载失败，则加载responders-servlet-loading。如果servlet在其操作期间出错，则使用responder-servlet。
如果banner?为真，则打印信息性横幅。您可能希望在从命令行运行时使用此命令行，在这种情况下command-line?选项控制类似选项。
MIME类型在mime-types-path中查找。默认情况下，将使用server-root-path中的“mime.types”文件，但如果该文件不存在，则使用Web服务器附带的文件。当然，如果给出一个路径，那么它会覆盖这个行为。
如果log-file被指定，那么它被用于以log-format作为格式日志的请求。允许的格式是那些符合log-format-> format的格式。如果log-format是一个函数，它直接用于渲染日志条目。
如果connection-close?是#t，则每个连接在一个请求后关闭。否则，客户端基于它使用的HTTP版本来决定。
1.3命令行工具
Web服务器提供了一个命令行实用程序：
         plt-web-server [-f <file-name> -p <port> -a <ip-address> --ssl]
可选的file-name参数指定路径给一个配置表S表达式（请参阅configuration-table-> sexpr以获取语法文档）。如果未提供此参数，则使用服务器附带的默认配置。可选的端口和ip地址参数覆盖配置表的相应部分。 如果提供了SSL选项，则服务器在当前目录中使用带有“server-cert.pem”和“private-key.pem”的HTTPS，其中443作为默认端口。 （有关SSL实现的详细信息，请参阅openssl模块。）
配置表被赋予configuration-table-> web-config @并用于构造web-config ^单元，并且与web-server @单元链接。 生成的单元被调用，服务器运行直到进程被终止。
