Racket中的Web应用程序

本手册介绍了用于构建Web应用程序的Racket库。
运行Web Servlet描述如何运行您编写的servlet。
有状态Servlet和无状态Servlet描述了写Web应用程序的两种方式。有状态Servlet使用整个Racket语言，但它们的扩展存储在Web服务器的内存中。无状态Servlet使用稍微受限的Racket语言，但它们的扩展可以由Web客户端或Web服务器的磁盘存储。如果可以，您会使用无状态Servlet来提高可伸缩性。
HTTP：超文本传输协议部分描述用于操纵HTTP请求和创建HTTP响应的公共库函数。特别是，本节涵盖Cookie，身份验证和请求绑定。
最后五个部分（基于URL的分配，Formlet：功能表单抽象；模板：分离视图；页面：常见模式的简写和测试Servlet）覆盖了简化典型Web应用程序创建的实用程序库。
本手册涵盖常见问题章节：故障排除和提示。

    1运行Web Servlet
      1.1即时Servlet
      1.2简单的单Servlet服务器
        1.2.1示例
          1.2.1.1无状态Servlet
        1.2.2完整的API
      1.3命令行工具
    2有状态Servlet
      2.1示例
      2.2回应
      2.3 Web交互
      2.4网络单元
      2.5扩展管理器
        2.5.1概述
        2.5.2无扩展
        2.5.3超时
        2.5.4 LRU
    3无状态Servlet
      3.1示例
      3.2使用注意事项
      3.3可串行扩展
      3.4本机接口
      3.5无状态Web交互
      3.6无状态Web单元
      3.7文件箱
      3.8无状态Web参数
      3.9软状态
      3.10垫圈
        3.10.1基本组合器
        3.10.2序列化
        3.10.3 Base64编码
        3.10.4 GZip压缩
        3.10.5键/值存储
        3.10.6散列寻址存储
        3.10.7 HMAC-SHA1签名
        3.10.8助手
    4 HTTP：超文本传输协议
      4.1请求
      4.2绑定
      4.3回应
      4.4放置Cookie
      4.5已验证的Cookie
      4.6提取Cookie
      4.7重定向
      4.8基本认证
      4.9摘要验证
      4.10 X表达式支持
    5基于URL的调度
      5.1使用web-server/dispatch
      5.2 API参考
      5.3命令式调度容器
      5.4内置的URL模式
      5.5扩展Web服务器/调度
    6 Formlet：功能表抽象
      6.1基本使用
      6.2静态语法缩写
      6.3动态语法缩写
      6.4功能使用
      6.5预定义格式
      6.6工具
    7模板：分离视图
      7.1静态
      7.2动态
      7.3 Gotchas
      7.4逃逸
      7.5 HTTP响应
      7.6 API详情
      7.7转换示例
    8页面：普通模式的缩写
    9测试Servlet
    10故障排除和提示
      10.1为什么我的servlet失败，出现响应错误？更新Racket后违反合同？
      10.2当我在磁盘上更改文件时，为什么我的模板不在服务器上更新？
      10.3为什么将模板编译成程序？
      10.4当我更改磁盘上的文件时，为什么我的有状态servlet不在服务器上更新？
      10.5刷新我的有状态servlet后，原捕获的扩展不会改变或原来的全局效果消失。为什么？
      10.6无状态servlet如何与有状态的servlet不同于一个刷新？
      10.7 Web服务器的安全性有什么特别的注意事项？
      10.8我的浏览器奇怪地显示我的页面：我的CSS被忽略，部分丢失等。
      10.9如何“动态”使用模板？
