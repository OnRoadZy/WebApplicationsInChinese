10 故障排除和提示

10.1为什么我的servlet失败，出现响应错误？ 更新Racket后违反合同？
在5.0.2之后，Web服务器具有向后不兼容的更改，阻止X表达式和字节列表直接从servlet返回。 请阅读“PLTHOME/collects/web-server/compat/0/README”了解如何将servlet转发。 别担心， 这很容易。

10.2当我在磁盘上更改文件时，为什么我的模板不在服务器上更新？
模板被编译到您的应用程序中，因此，当您更改它们时，文件系统中的更改与已在运行的Web服务器进程中已加载的已编译字节码之间没有连接。 有关更多讨论，请参阅为什么当我更改磁盘上的文件时，我的状态servlet不在服务器上更新。

10.3为什么将模板编译成程序？
因为模板可以包括任意的Racket代码，宏等，并且引用任意标识符，include-template实际上只是一个模糊的require。

10.4当我更改磁盘上的文件时，为什么我的状态servlet不在服务器上更新？
如果使用serve / servlet，它将启动一个Web服务器，该服务器直接引用一个与磁盘上某个文件没有任何连接的闭包。
如果使用命令行工具或配置文件，则默认情况下，服务器使用make-cached-url-> servlet从磁盘加载servlet。在加载它们时，它们被缓存，并且磁盘不被引用以用于将来的请求。这确保每个servlet都有一个命名空间，以便不同的实例可以共享资源，例如数据库连接，并通过存储进行通信。服务器的默认配置（意味着加载配置文件时使用的调度程序序列）为localhost提供了一个特殊的URL，该URL将重置缓存：“/ conf / refresh-servlets”。
如果希望服务器重新加载已更改的servlet代码，请GET此URL，并且服务器将在下一个请求时重新加载servlet。但是，您可能会惊讶于下一个请求会发生什么。有关更多讨论，请参阅刷新我的状态servlet后，旧捕获的继续不更改或旧的全局效果消失。为什么？

10.5刷新我的状态servlet后，旧的捕获的继续不会改变或旧的全局效果消失。 为什么？
你的servlet的每一个负载都在一个新的命名空间。 刷新时，将创建一个没有旧效果的新命名空间。 旧捕获的继续引用原始命名空间，并且永远不会更新。 一般来说，从一个命名空间到另一个命名空间的连接是不可能的，因为代码可以是任意不同的。

10.6无状态servlet如何与有状态的servlet不同于一个刷新的？
连续序列化的哈希，确保任何源代码修改使所有旧的继续不兼容的相同的原因本机继续自然是。
但是，此哈希仅防止单个源文件中的更改。 因此，如果您对应用程序进行模块化，则只有引用更改的源文件的继续将不兼容。 例如，如果将所有模板放在一个模块中，则它可以更改而不会使旧的继续无效。

10.7 Web服务器的安全性有什么特别的注意事项？
最大的问题是，连续的扩展使用将允许扩展推翻认证机制。通常，执行扩展所必需的是其URL。因此，URL必须与扩展中的信息一样受到保护。
考虑如果从私人扩展URL链接到公共站点：新HTTP请求中的Referrer字段将包含专用URL。此外，如果您的HTTP流量是清楚的，那么这些URL可以很容易被偷猎。
对此的一个解决方案是使用特殊的cookie作为认证者。这样，如果URL转义，它将无法使用，除非cookie存在。有关如何做到这一点的建议，请参阅从MIT Cookie Eaters的Client Authentication on the Web from the MIT Cookie Eaters。
注意：这可能是一个很好的功能，URL可以这样共享，因为委托很容易通过URL构建到应用程序中。

10.8我的浏览器奇怪地显示我的页面：我的CSS被忽略，部分丢失等。
大多数Web服务器开发人员使用X表达式来表示其页面的HTML。但是，X表达式只表示XML，HTML不完全是XML。这是一个常见的问题来源。
例如，XML允许“空标签速记”，例如。 <img src ='...'/>，而HTML有时需要结束标记，例如文字。类似地，XML允许结束标签，例如<img src ='...'> </ img>，而HTML有时会禁止结束标记，例如IMG。 （当然，浏览器不一定按照指定的方式实现他们的HTML解析，并且可能对XML类似的HTML或多或少宽松，因此您的测试浏览器可能不会将这些表单视为有问题的。）
由于Web服务器使用xml来格式化X表达式，因此它一般继承了xml的默认渲染行为，并特别使用“空标签速记”。 xml的默认值总是使用来自html-empty-tags的标签的速记，而不是其他方式。此列表应包含W3C批准的列表。您可以使用empty-tag-shorthand参数更改它。
您还可以更改X表达式，以强制结束标记。例如，'（textarea [（name“text”）]）呈现为<textarea name =“text”/>，而'（textarea [（name“text”）]“”）呈现为<textarea name =“text “> </ textarea>，因为X表达式中的字符串内容。在这种情况下，结束标记将始终存在，而不管空标记简写的值。不可能强迫另一种可能性;即，从不包括结束标签。
你可能认为Web服务器可以做一个更好的工作广告，其服务的内容默认情况下更像是XML。不幸的是，缺乏对这种广告的浏览器支持。您可以使用response/xexpr轻松自定义应用程序的MIME类型和响应标头。
最后，您可能会发现Web浏览器检查器（如Safari Inspector，Firebug和Google Chrome错误控制台）是识别违规标记的有用工具。

10.9如何“动态”使用模板？共同的特征请求是将一个模板动态地包括在另一个模板中。 
显而易见的希望是，include-template可以包括在模板中以包括静态子模板。 例如，
(include-template "posts.html")
可能会出现在“blog.html”模板中。 但是你会很快发现（include-template expr）将失败，当expr语法不是一个路径，例如：
....
(include-template (if logged-in?
                      "user-info.html"
                      "auth.html"))
.…
解决办法是什么？ 模板系统已允许您对模板进行参数化，因此特定组件来自包含范围。 没有理由这些值不能是其他模板的结果。 在前面的示例中，假设包含器是
(define (main-page logged-in?)
  (include-template "site.html"))
我们可以将其更改为：
(define (main-page logged-in?)
  (define user-content
    (if logged-in?
        (include-template "user-info.html")
        (include-template "auth.html")))
  (include-template "site.html"))
和“site.html”至：
....
user-content
.…
这允许你做同样的事情，但是更安全和更有效：更安全，因为没有办法包括没有被程序员命名的模板，更高效，因为所有的模板都被编译（和优化）与其余的代码 。
如果你坚持动态主义，总是有eval。
